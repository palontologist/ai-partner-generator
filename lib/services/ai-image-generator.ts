"use server";

import * as fs from 'node:fs';
import { promisify } from 'node:util';
import * as path from 'node:path';

// Helper to handle file saving
const writeFile = promisify(fs.writeFile);

export async function generateImage(prompt: string): Promise<string> {
    try {
        // Check for API key first
        const apiKey = process.env.GEMINI_API_KEY;
        if (!apiKey) {
            throw new Error('GEMINI_API_KEY is not configured. Please set your Google AI API key in the environment variables.');
        }

        // Import Google GenAI (same as the existing Imagen service)  
        const { GoogleGenAI } = await import('@google/genai');
        
        const ai = new GoogleGenAI({
            apiKey: apiKey
        });

        console.log('Generating image with prompt:', prompt);

        // Use generateImages method similar to existing Imagen service
        const response = await ai.models.generateImages({
            model: 'imagen-3.0-generate-001', // Use the same model as existing service
            prompt: prompt,
            config: {
                numberOfImages: 1,
                outputMimeType: "image/png",
                aspectRatio: "1:1",
                imageSize: "1K",
            }
        });

        let fileName = '';

        // Process generated images similar to the problem statement's approach
        if (response.generatedImages && response.generatedImages.length > 0) {
            const generatedImage = response.generatedImages[0];
            
            console.log('Image generation response received, processing...');
            
            // Check if image data exists
            if (generatedImage.image && generatedImage.image.imageBytes) {
                const timestamp = Date.now();
                fileName = `generated-${timestamp}.png`;

                // Ensure the 'public' directory exists
                const publicDir = path.join(process.cwd(), 'public');
                if (!fs.existsSync(publicDir)) {
                    fs.mkdirSync(publicDir, { recursive: true });
                    console.log('Created public directory');
                }

                // Convert from base64 and save (similar to existing processGeneratedImage method)
                const imgBytes = generatedImage.image.imageBytes;
                const buffer = Buffer.from(imgBytes, "base64");
                
                const filePath = path.join(publicDir, fileName);
                await writeFile(filePath, buffer);
                
                console.log('Image saved successfully:', filePath);
            } else {
                throw new Error('No image data found in the generated result');
            }
        } else {
            throw new Error('No images were generated by the API');
        }

        // Return the public URL path
        return `/${fileName}`;
    } catch (error) {
        console.error('Error generating image:', error);
        
        // Provide more specific error messages
        if (error instanceof Error) {
            if (error.message.includes('API key')) {
                throw new Error('API Key Error: ' + error.message);
            } else if (error.message.includes('generateImages')) {
                throw new Error('Image Generation API Error: ' + error.message);
            } else {
                throw new Error('Image Generation Error: ' + error.message);
            }
        }
        
        throw error;
    }
}